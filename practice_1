#include<stdio.h>
#include<string.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>

int npoints = 10000000;
int circle_count = 0;
int point = 0;
double pi;


pthread_mutex_t lock;

void* monteCarlo(void *arg){
	pthread_mutex_lock(&lock);
	for(int  i= 0; i < npoints && point < npoints; i++, point++){    
		double y_num = (double)(rand()%10000000)/10000000;
		double x_num = (double)(rand()%10000000)/10000000;
		if( x_num*x_num + y_num*y_num <= 1){
			circle_count ++;
		}	
        }

	pthread_mutex_unlock(&lock);
	return NULL;
}
	      	
int main(int argc, char *argv[]){
	int i = 0;
	int err;
	int threads = atoi(argv[1]);
	pthread_t tid[threads];	
	if (pthread_mutex_init(&lock, NULL) != 0) {
		printf("\n mutex init failed\n");
	        return 1;
	}
	    
	while(i < threads) {
		err = pthread_create(&(tid[i]), NULL, &monteCarlo, NULL);
	        if (err != 0) 
	        	printf("\ncan't create thread :[%s]", strerror(err));
	         	i++;
	}
	i = 0;
	while(i < threads){
		pthread_join(tid[i], NULL);
		i++;
	}
	pi = 4.0*((double)circle_count/10000000.0);
	printf("circle count= %d ",circle_count); 
	printf("\n pi value = %f\n", pi);
	pthread_mutex_destroy(&lock);
	    
}
